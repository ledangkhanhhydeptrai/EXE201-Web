import {
  Button,
  Dialog,
  DialogContent,
  DialogTitle,
  Modal,
  Pagination,
  Paper,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow
} from "@mui/material";
import Header from "../HeaderAdmin/Header";
import Sidebar from "../Sidebar/Sidebar";
import styles from "./ServiceOptional.module.scss";
import { useEffect, useState } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom";

const ServiceOptional = () => {
  const [data, setData] = useState([]);
  const [open, setOpen] = useState(false);
  const [currentService, setCurrentService] = useState(null);
  const [openCreate, setOpenCreate] = useState(false);
  const [serviceName, setServiceName] = useState("");
  const [description, setDescription] = useState("");
  const [price, setPrice] = useState(0);
  const [file, setFile] = useState(null);
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 5;
  const startIndex = (currentPage - 1) * itemsPerPage;
  const endIndex = currentPage + itemsPerPage;
  const currentData = data.slice(startIndex, endIndex);
  const [isLoading, setIsLoading] = useState(false);
  const API_URL = import.meta.env.VITE_API_BASE_URL;
  const handleOpenCreate = () => {
    setOpenCreate(true);
  };
  const handleCloseCreate = () => {
    setOpenCreate(false);
  };
  const handleOpen = (service) => {
    setCurrentService(service);
    setOpen(true);
  };
  const handleClose = () => {
    setOpen(false);
  };
  const fetchData = async () => {
    const response = await axios.get(
      `${API_URL}/OptionalService/v1/getAllOptionalServiceIsActive`
    );
    if (response.status >= 200 && response.status < 300) {
      setData(response.data.data.sort((a, b) => a.serviceId - b.serviceId));
    } else {
      throw new Error(`HTTP Status:${response.status}`);
    }
  };
  useEffect(() => {
    fetchData();
  });
  const handleSubmit = async () => {
    // üîπ Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o tr∆∞·ªõc khi g·ª≠i API
    if (!serviceName || serviceName.trim() === "") {
      alert("‚ùå Vui l√≤ng nh·∫≠p t√™n d·ªãch v·ª•!");
      return;
    }

    if (!description || description.trim() === "") {
      alert("‚ùå Vui l√≤ng nh·∫≠p m√¥ t·∫£ d·ªãch v·ª•!");
      return;
    }

    if (!price || isNaN(price) || Number(price) <= 0) {
      alert("‚ùå Gi√° d·ªãch v·ª• kh√¥ng h·ª£p l·ªá!");
      return;
    }

    if (!file) {
      alert("‚ùå Vui l√≤ng t·∫£i l√™n h√¨nh ·∫£nh d·ªãch v·ª•!");
      return;
    }

    const formData = new FormData();
    formData.append("serviceName", serviceName);
    formData.append("description", description);
    formData.append("price", price);
    formData.append("file", file);

    console.log("üì¶ FormData content:");
    for (let pair of formData.entries()) {
      console.log(`${pair[0]}: ${pair[1]}`);
    }

    try {
      const response = await axios.post(
        `${API_URL}/OptionalService/v1/createService`,
        formData,
        {
          headers: {
            "Content-Type": "multipart/form-data"
          }
        }
      );

      if (response.status === 201) {
        setData((prevData) => [...prevData, response.data.data]);
        alert("‚úÖ D·ªãch v·ª• ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!");
        setOpenCreate(false);
        window.location.reload();
      } else {
        throw new Error(`‚ùå HTTP Status: ${response.status}`);
      }
    } catch (error) {
      console.error("üö® L·ªói khi t·∫°o d·ªãch v·ª•:", error);

      let errorMessage = "‚ùå C√≥ l·ªói x·∫£y ra khi t·∫°o d·ªãch v·ª•!";
      if (error.response) {
        const { status, data } = error.response;

        // X·ª≠ l√Ω l·ªói t·ª´ API
        if (status === 400) {
          errorMessage = "‚ùå Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá!";
        } else if (status === 401) {
          errorMessage = "‚ùå B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c token kh√¥ng h·ª£p l·ªá!";
        } else if (status === 409) {
          errorMessage = "‚ùå D·ªãch v·ª• n√†y ƒë√£ t·ªìn t·∫°i!";
        } else {
          errorMessage = data?.message || errorMessage;
        }
      }

      alert(errorMessage);
    }
  };

  const handleUpdate = async (event) => {
    event.preventDefault();
    setIsLoading(true);

    // üîπ Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o tr∆∞·ªõc khi g·ª≠i API
    const serviceName = event.target.serviceName.value.trim();
    const description = event.target.serviceDescription.value.trim();
    const price = event.target.servicePrice.value.trim();
    const fileInput = event.target.imageService;

    if (!serviceName) {
      alert("‚ùå Vui l√≤ng nh·∫≠p t√™n d·ªãch v·ª•!");
      setIsLoading(false);
      return;
    }

    if (!description) {
      alert("‚ùå Vui l√≤ng nh·∫≠p m√¥ t·∫£ d·ªãch v·ª•!");
      setIsLoading(false);
      return;
    }

    if (!price || isNaN(price) || Number(price) <= 0) {
      alert("‚ùå Gi√° d·ªãch v·ª• kh√¥ng h·ª£p l·ªá!");
      setIsLoading(false);
      return;
    }

    const formData = new FormData();
    formData.append("serviceName", serviceName);
    formData.append("description", description);
    formData.append("price", price);

    if (fileInput.files.length > 0) {
      console.log("‚úÖ File uploaded:", fileInput.files[0].name);
      formData.append("file", fileInput.files[0]);
    } else {
      console.warn("‚ö†Ô∏è Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c ch·ªçn!");
    }

    // Ki·ªÉm tra d·ªØ li·ªáu trong FormData
    console.log("üì§ D·ªØ li·ªáu g·ª≠i l√™n:");
    for (let pair of formData.entries()) {
      console.log(`${pair[0]}:`, pair[1]);
    }

    try {
      const response = await axios.put(
        `${API_URL}/OptionalService/v1/update/${currentService.serviceId}`,
        formData,
        {
          headers: {
            "Content-Type": "multipart/form-data",
            accept: "*/*"
          }
        }
      );

      console.log("‚úÖ Response data:", response.data);

      if (response.status >= 200 && response.status < 300) {
        alert("‚úÖ C·∫≠p nh·∫≠t d·ªãch v·ª• th√†nh c√¥ng!");
        window.location.reload();
        handleClose();
      } else {
        alert("‚ùå C·∫≠p nh·∫≠t d·ªãch v·ª• th·∫•t b·∫°i!");
      }
    } catch (error) {
      console.error("üö® L·ªói khi c·∫≠p nh·∫≠t d·ªãch v·ª•:", error);

      let errorMessage = "‚ùå C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t d·ªãch v·ª•!";
      if (error.response) {
        const { status, data } = error.response;

        // X·ª≠ l√Ω l·ªói t·ª´ API
        if (status === 400) {
          errorMessage = "‚ùå Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá!";
        } else if (status === 401) {
          errorMessage = "‚ùå B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c token kh√¥ng h·ª£p l·ªá!";
        } else if (status === 404) {
          errorMessage = "‚ùå D·ªãch v·ª• kh√¥ng t·ªìn t·∫°i!";
        } else {
          errorMessage = data?.message || errorMessage;
        }
      }

      alert(errorMessage);
    } finally {
      setIsLoading(false);
    }
  };

  const handleDelete = async (serviceId) => {
    if (!window.confirm("‚ùó B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a d·ªãch v·ª• n√†y kh√¥ng?")) {
      return;
    }

    try {
      const response = await axios.delete(
        `${API_URL}/OptionalService/v1/deleteOptionalService/${serviceId}`,
        {
          headers: {
            accept: "*/*"
          },
          timeout: 5000
        }
      );

      if (response.status >= 200 && response.status < 300) {
        alert("‚úÖ D·ªãch v·ª• ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!");
        setData((prevData) =>
          prevData.filter((service) => service.serviceId !== serviceId)
        );
      } else {
        alert("‚ùå X√≥a d·ªãch v·ª• th·∫•t b·∫°i! Vui l√≤ng th·ª≠ l·∫°i.");
      }
    } catch (error) {
      console.error("üö® L·ªói khi x√≥a d·ªãch v·ª•:", error);

      let errorMessage = "‚ùå ƒê√£ x·∫£y ra l·ªói khi x√≥a d·ªãch v·ª•!";
      if (error.response) {
        const { status, data } = error.response;

        // X·ª≠ l√Ω l·ªói t·ª´ API
        if (status === 400) {
          errorMessage = "‚ùå Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá!";
        } else if (status === 401) {
          errorMessage = "‚ùå B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c token kh√¥ng h·ª£p l·ªá!";
        } else if (status === 403) {
          errorMessage = "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a d·ªãch v·ª• n√†y!";
        } else if (status === 404) {
          errorMessage = "‚ùå D·ªãch v·ª• kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a!";
        } else {
          errorMessage = data?.message || errorMessage;
        }
      } else if (error.code === "ECONNABORTED") {
        errorMessage = "‚è≥ Y√™u c·∫ßu x√≥a d·ªãch v·ª• b·ªã qu√° th·ªùi gian!";
      }

      alert(errorMessage);
    }
  };

  const navigate = useNavigate();
  return (
    <>
      <Header />
      <Sidebar />
      <div className={styles.createButtonContainer}>
        <Button
          variant="contained"
          color="primary"
          onClick={handleOpenCreate}
          style={{
            display: "block",
            margin: "20px auto"
          }}
        >
          T·∫°o d·ªãch v·ª•
        </Button>
        <Dialog open={openCreate} onClose={handleCloseCreate}>
          <DialogTitle className={styles.dialogTitle}>
            T·∫°o d·ªãch v·ª• cho th√∫ c∆∞ng
          </DialogTitle>
          <DialogContent>
            <div className={styles.formContainer}>
              <label htmlFor="serviceName">T√™n d·ªãch v·ª•</label>
              <input
                type="text"
                placeholder="Enter a service name"
                value={serviceName}
                onChange={(e) => setServiceName(e.target.value)}
              />

              <label htmlFor="description">Mi√™u t·∫£</label>
              <input
                type="text"
                placeholder="Enter a description"
                value={description}
                onChange={(e) => setDescription(e.target.value)}
              />

              <label htmlFor="price">Gi√° d·ªãch v·ª•</label>
              <input
                type="number"
                placeholder="Enter a price"
                value={price}
                onChange={(e) => setPrice(e.target.value)}
              />
              <label htmlFor="price">File</label>
              <input
                type="file"
                accept="image/*"
                onChange={(e) => setFile(e.target.files[0])}
              />
              <Button
                variant="contained"
                color="primary"
                onClick={handleSubmit}
              >
                Submit
              </Button>
            </div>
          </DialogContent>
        </Dialog>
      </div>
      <div className={styles.container}>
        <TableContainer
          component={Paper}
          sx={{
            borderRadius: "12px",
            boxShadow: "0 4px 10px rgba(0,0,0,0.1)",
            overflow: "hidden",
            marginTop: "-50px"
          }}
        >
          <Table sx={{ minWidth: 650 }} aria-label="service table">
            <TableHead>
              <TableRow sx={{ backgroundColor: "#f50057" }}>
                <TableCell sx={{ color: "#fff", fontWeight: "bold" }}>
                  Service ID
                </TableCell>
                <TableCell
                  sx={{ color: "#fff", fontWeight: "bold" }}
                  align="center"
                >
                  T√™n d·ªãch v·ª•
                </TableCell>
                <TableCell
                  sx={{ color: "#fff", fontWeight: "bold" }}
                  align="center"
                >
                  Mi√™u t·∫£
                </TableCell>
                <TableCell
                  sx={{ color: "#fff", fontWeight: "bold" }}
                  align="center"
                >
                  Gi√° d·ªãch v·ª•
                </TableCell>
                <TableCell
                  sx={{ color: "#fff", fontWeight: "bold" }}
                  align="center"
                >
                  H√¨nh ·∫£nh
                </TableCell>
                <TableCell
                  sx={{ color: "#fff", fontWeight: "bold" }}
                  align="center"
                >
                  Trang th√°i
                </TableCell>
                <TableCell
                  sx={{ color: "#fff", fontWeight: "bold" }}
                  align="center"
                >
                  C·∫≠p nh·∫≠t
                </TableCell>
                <TableCell
                  sx={{ color: "#fff", fontWeight: "bold" }}
                  align="center"
                >
                  X√≥a
                </TableCell>
                <TableCell
                  sx={{ color: "#fff", fontWeight: "bold" }}
                  align="center"
                >
                  Chi ti·∫øt
                </TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {currentData.length === 0 ? (
                <TableRow>
                  <TableCell colSpan={9} align="center">
                    Kh√¥ng c√≥ d·ªØ li·ªáu
                  </TableCell>
                </TableRow>
              ) : (
                currentData.map((row, index) => (
                  <TableRow
                    key={index}
                    sx={{
                      "&:last-child td, &:last-child th": { border: 0 },
                      "&:hover": {
                        backgroundColor: "#ffe6ea",
                        cursor: "pointer"
                      }
                    }}
                  >
                    <TableCell component="th" scope="row">
                      {row.serviceId}
                    </TableCell>
                    <TableCell align="center">{row.serviceName}</TableCell>
                    <TableCell align="center">{row.description}</TableCell>
                    <TableCell align="center">{row.price}</TableCell>
                    <TableCell align="center">
                      <div
                        style={{
                          display: "flex",
                          justifyContent: "center",
                          alignItems: "center"
                        }}
                      >
                        <img
                          src={`${row.imageServiceBase64}?t=${Date.now()}`}
                          alt="Service"
                          style={{
                            width: "50px",
                            height: "50px",
                            objectFit: "cover",
                            borderRadius: "8px"
                          }}
                        />
                      </div>
                    </TableCell>
                    <TableCell align="center">
                      {row.active ? "ƒêang ho·∫°t d·ªông" : "Kh√¥ng hoat ƒë·ªông"}
                    </TableCell>
                    <TableCell align="center">
                      <button
                        onClick={() => handleOpen(row)}
                        style={{ fontSize: "0.8rem", width: "90px" }}
                      >
                        C·∫≠p nh·∫≠t
                      </button>
                    </TableCell>
                    <TableCell align="center">
                      <button onClick={() => handleDelete(row.serviceId)}>
                        X√≥a
                      </button>
                    </TableCell>
                    <TableCell align="center">
                      <Button
                        onClick={() =>
                          navigate(`/serviceoptional/${row.serviceId}`)
                        }
                        sx={{ fontSize: "0.75rem", width: "84px" }}
                      >
                        Chi ti·∫øt
                      </Button>
                    </TableCell>
                  </TableRow>
                ))
              )}
            </TableBody>
          </Table>
        </TableContainer>
        <Modal
          style={{
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
            backgroundColor: "rgba(0, 0, 0, 0.5)"
          }}
          open={open}
          onClose={handleClose}
        >
          <div className={styles.modalContent}>
            <form onSubmit={handleUpdate}>
              <label htmlFor="serviceName">Service Name</label>
              <input
                type="text"
                name="serviceName"
                defaultValue={currentService?.serviceName}
                required
              />

              <label htmlFor="serviceDescription">Description</label>
              <input
                type="text"
                name="serviceDescription"
                defaultValue={currentService?.description}
                required
              />

              <label htmlFor="servicePrice">Price</label>
              <input
                type="number"
                name="servicePrice"
                defaultValue={currentService?.price}
                required
              />

              <label htmlFor="imageService">Image Service</label>
              <input type="file" name="imageService" required />

              <button type="submit" disabled={isLoading}>
                {isLoading ? "Updating..." : "Update"}
              </button>
            </form>
          </div>
        </Modal>
        <div className={styles.pagination}>
          <Pagination
            count={Math.ceil(data.length / itemsPerPage)}
            page={currentPage}
            onChange={(event, value) => setCurrentPage(value)}
            color="primary"
          />
        </div>
      </div>
    </>
  );
};

export default ServiceOptional;
